"use strict";let users=[];function findOpponent(e){for(let o=0;o<users.length;o++)e!==users[o]&&users[o].opponent===null&&new Game(e,users[o]).start()}function removeUser(e){users.splice(users.indexOf(e),1)}class Game{constructor(e,o){this.user1=e;this.user2=o;this.user1.playerNo=PLAYER_1;this.user2.playerNo=PLAYER_2;this.turn=PLAYER_1;this.gameboard=new RectGameBoard(6,8,!1)}start(){this.user1.start(this,this.user2);this.user2.start(this,this.user1)}ended(){return this.gameboard.isBoardFilled()}score(){let e=this.gameboard.getScores();e[this.user1.playerNo]>e[this.user2.playerNo]?(this.user1.win(),this.user2.lose()):e[this.user1.playerNo]<e[this.user2.playerNo]?(this.user2.win(),this.user1.lose()):(this.user1.draw(),this.user2.draw())}}class User{constructor(e){this.socket=e;this.playerNo=null;this.game=null;this.opponent=null}start(e,o){this.game=e;this.opponent=o;this.socket.emit("start",this.game.gameboard,this.playerNo)}end(){this.game=null;this.opponent=null;this.socket.emit("end")}wait(){this.socket.emit("wait",this.game.gameboard,this.game.gameboard.getScores())}turn(){this.socket.emit("turn",this.game.gameboard,this.game.gameboard.getScores(),this.game.gameboard.getValidMoves(this.playerNo))}win(){this.socket.emit("win",this.opponent.guess)}lose(){this.socket.emit("lose",this.opponent.guess)}draw(){this.socket.emit("draw",this.opponent.guess)}}module.exports={io:e=>{let o=new User(e);users.push(o);findOpponent(o);o.opponent&&(o.opponent.wait(),o.turn());e.on("disconnect",()=>{console.log("Disconnected: "+e.id),removeUser(o),o.opponent&&(o.opponent.end(),findOpponent(o.opponent))});e.on("move",n=>{console.log("Move: "+e.id),o.game.turn===o.playerNo&&(o.game.gameboard.doMove(n.r,n.c,o.playerNo)&&(o.opponent.turn(),o.wait(),o.game.turn=(o.game.turn+1)%NUM_PLAYERS),o.game.ended()&&o.game.score())});console.log("Connected: "+e.id)},stat:(e,o)=>{storage.get('games',0).then(e=>{o.send(`<h1>Games played: ${e}</h1>`)})}}