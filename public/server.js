"use strict";let users=[];function findOpponent(n){for(let e=0;e<users.length;e++)n!==users[e]&&users[e].opponent===null&&new Game(n,users[e]).start()}function removeUser(n){users.splice(users.indexOf(n),1)}class Game{constructor(n,e){this.user1=n;this.user2=e;this.gameboard=new GameBoard(5,5)}start(){this.user1.start(this,this.user2);this.user2.start(this,this.user1)}ended(){}score(){}}class User{constructor(n){this.socket=n;this.game=null;this.opponent=null}start(n,e){this.game=n;this.opponent=e;this.socket.emit("start",this.game.gameboard)}end(){this.game=null;this.opponent=null;this.socket.emit("end")}wait(){this.socket.emit("wait",this.game.gameboard)}turn(){this.socket.emit("turn",this.game.gameboard)}win(){this.socket.emit("win",this.opponent.guess)}lose(){this.socket.emit("lose",this.opponent.guess)}draw(){this.socket.emit("draw",this.opponent.guess)}}module.exports={io:n=>{let e=new User(n);users.push(e);findOpponent(e);e.opponent&&e.opponent.wait();n.on("disconnect",()=>{console.log("Disconnected: "+n.id),removeUser(e),e.opponent&&(e.opponent.end(),findOpponent(e.opponent))});n.on("move",t=>{console.log("Move: "+n.id),e.opponent.turn(),e.wait()});console.log("Connected: "+n.id)},stat:(n,e)=>{storage.get('games',0).then(n=>{e.send(`<h1>Games played: ${n}</h1>`)})}}